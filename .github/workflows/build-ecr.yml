name: Build & Push Online Boutique images to ECR

on:
  push:
    branches: [ "${{ vars.DEFAULT_BRANCH || 'main' }}" ]
  workflow_dispatch: {}

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  ECR_PREFIX: ${{ vars.ECR_PREFIX }} # set as GH repo variable; fallback below if missing

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # needed for OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Compute ECR prefix (fallback if repo var not set)
        id: prep
        run: |
          ACC_ID=$(aws sts get-caller-identity --query Account --output text)
          : "${ECR_PREFIX:=${ACC_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/online-boutique/dev}"
          echo "ECR_PREFIX=${ECR_PREFIX}" >> $GITHUB_OUTPUT

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Build & Push (matrix)
        run: |
          set -euo pipefail
          SERVICES="adservice cartservice checkoutservice currencyservice emailservice frontend paymentservice productcatalogservice recommendationservice shippingservice"
          for SVC in $SERVICES; do
            IMAGE="${{ steps.prep.outputs.ECR_PREFIX }}/${SVC}"
            echo "== Building $SVC => $IMAGE =="
            # Most services have Dockerfile in ./src/<svc> OR root dir names vary across forks.
            # Try common locations:
            if [ -f "./src/${SVC}/Dockerfile" ]; then
              CTX="./src/${SVC}"
            elif [ -d "./${SVC}" ] && [ -f "./${SVC}/Dockerfile" ]; then
              CTX="./${SVC}"
            else
              echo "::error::Dockerfile for ${SVC} not found"; exit 1
            fi
            docker build -t "${IMAGE}:$GITHUB_SHA" -t "${IMAGE}:latest" "${CTX}"
            docker push "${IMAGE}:$GITHUB_SHA"
            docker push "${IMAGE}:latest"
          done
